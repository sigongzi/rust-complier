use crate::ast::{*};

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^\*]|(\*)*[^\*/])*(\*)*\*/" => {},
  // 剩下的情况采用默认方式处理
  _
}




// Full program
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };


// Declare variable or const
Decl : Decl = {
  ConstDecl => Decl::Const(<>),
  VarDecl => Decl::Var(<>)
}

BType : String = "int" => <>.to_string();

ConstDecl : ConstDecl = "const" BType <def : ConstDef> <mut defs : ("," <ConstDef>)*> ";"=> {
  defs.insert(0, def);
  ConstDecl{defs}
};

// VarDecl       ::= BType VarDef {"," VarDef} ";";
VarDecl : VarDecl = BType <def : VarDef> <mut defs : ("," <VarDef>)*> ";" => {
  defs.insert(0, def);
  VarDecl{defs}
};

// ConstDef      ::= IDENT "=" ConstInitVal;
ConstDef : ConstDef = <id : Ident> "=" <init_val : ConstInitVal> => ConstDef{<>};

// VarDef        ::= IDENT | IDENT "=" InitVal;
VarDef  : VarDef =  {
  <id: Ident> <init_val: ("=" <InitVal>)?> => {
    VarDef {<>}
  }
};

ConstInitVal : ConstInitVal = <exp : ConstExp> => ConstInitVal {<>};

// InitVal       ::= Exp;
InitVal : InitVal = <exp : Exp> => InitVal {<>};



// Function Define and Type 
FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;


// Block 
Block: Block = "{" <items : (BlockItem)*> "}" => Block { <> };

BlockItem : BlockItem = {
  Decl => BlockItem::Decl(<>),
  Stmt => BlockItem::Stmt(<>),
}


Stmt: Stmt = {
  MatchedStmt => <>,
  OpenStmt => <>,
  
}

MatchedStmt : Stmt = {
  <lval : LVal> "=" <exp: Exp> ";" => Stmt::Assign(Assign{ <> }),
  "return" <exp: (Exp)?> ";" => Stmt::Return(Return{<>}),
  Block => Stmt::Block(<>),
  <exp: (Exp)?> ";" =>  Stmt::ExpStmt(ExpStmt{<>}),
  "if" "(" <condition : Exp >")" <then: MatchedStmt> 
    "else" <else_then: MatchedStmt> => {
      Stmt::If(Box::new(If {condition, then, else_then: Some(else_then)}))
  },
  //"break" ";" => Stmt::Break(Break),
  //"continue" ";" => Stmt::Continue(Continue)
}

OpenStmt : Stmt = {
  "if" "(" <condition: Exp> ")" <then: Stmt> => {
    Stmt::If(Box::new(If {condition, then, else_then: None}))
  },
  "if" "(" <condition: Exp> ")" <then: MatchedStmt> "else" 
    <else_then: OpenStmt> => {
      Stmt::If(Box::new(If {condition, then, else_then: Some(else_then)}))
    }
}

Number: i32 = <num: IntConst> => <>;

LVal : LVal = <id: Ident> => LVal {<>};

Exp: Exp = <lor: LOrExp> => Exp { <> };

// 单表达式（数字）或括号
PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Ausdruck(Box::new(<>)),
  Number => PrimaryExp::Number(<>),
  LVal => PrimaryExp::LVal(<>)
}

// 单元表达式
UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::PrimaryAusdruck(<>),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::UnaryAusdruck(op, Box::new(exp)),
}

// 二元表达式
MulExp: MulExp = {
  UnaryExp => MulExp::UnaryAusdruck(<>),
  <lhs : MulExp> <op : MulOp> <rhs : UnaryExp> => 
    MulExp::MulAusdruck(Box::new(lhs), op, rhs) 
}

AddExp: AddExp = {
  MulExp => AddExp::MulAusdruck(<>),
  <lhs: AddExp> <op : AddOp> <rhs : MulExp> => 
    AddExp::AddAusdruck(Box::new(lhs), op, rhs)
}

RelExp: RelExp = {
  AddExp => RelExp::AddAusdruck(<>),
  <lhs: RelExp> <op : RelOp> <rhs : AddExp> =>
    RelExp::RelAusdruck(Box::new(lhs), op, rhs)
}

EqExp: EqExp = {
  RelExp => EqExp::RelAusdruck(<>),
  <lhs: EqExp> <op: EqOp> <rhs: RelExp> =>
    EqExp::EqAusdruck(Box::new(lhs), op, rhs)
}

// 逻辑表达式
LAndExp: LAndExp = {
  EqExp => LAndExp::EqAusdruck(<>),
  <lhs: LAndExp> "&&" <rhs: EqExp> =>
    LAndExp::LAndAusdruck(Box::new(lhs), rhs)
}

LOrExp: LOrExp = {
  LAndExp => LOrExp::LAndAusdruck(<>),
  <lhs: LOrExp> "||" <rhs: LAndExp> =>
    LOrExp::LOrAusdruck(Box::new(lhs), rhs)
}

// lv 4 const
ConstExp : ConstExp = <exp : Exp> => ConstExp {<>};

// Operator 优先级由高到低
// 一元操作
UnaryOp: UnaryOp = {
  "-" => UnaryOp::Negative,
  "!" => UnaryOp::LNot,
  "+" => UnaryOp::Positive
}

// * / %
MulOp : MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod
}

// 加法
AddOp : AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub
}

// 关系
RelOp : RelOp = {
  "<" => RelOp::Lt,
  ">" => RelOp::Gt,
  "<=" => RelOp::Le,
  ">=" => RelOp::Ge
}

// 相等
EqOp : EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::NotEq
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}